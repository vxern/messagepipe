{
  "version": 3,
  "sources": ["../src/transformers.ts", "../src/parser.ts", "../src/messagepipe.ts"],
  "sourcesContent": ["export function intlTransformers(locale: string = 'en-GB') {\r\n  const globalTransformers: Record<string, (value: string, options?: Record<string, any>) => string> = {\r\n    relativeTime(value, { type = 'hour', ...options } = {}) {\r\n      return new Intl.RelativeTimeFormat(locale, {\r\n        ...options,\r\n      }).format(Number(value) / 1000 / 60 / 60, type);\r\n    },\r\n    date(value) {\r\n      return new Intl.DateTimeFormat(locale, {\r\n        year: 'numeric',\r\n        month: 'numeric',\r\n        day: 'numeric',\r\n      }).format(value as any);\r\n    },\r\n    time(value) {\r\n      return new Intl.DateTimeFormat(locale, {\r\n        hour: 'numeric',\r\n        minute: 'numeric',\r\n        second: 'numeric',\r\n      }).format(value as any);\r\n    },\r\n    plural(value, { type = 'cardinal', ...options } = {}) {\r\n      return options[new Intl.PluralRules(locale, { type }).select(value as any)]?.replace('#', value);\r\n    },\r\n    number(value, { style, currency, unit, unitDisplay, maximumSignificantDigits } = {}) {\r\n      return new Intl.NumberFormat(locale, {\r\n        style,\r\n        currency,\r\n        unit,\r\n        unitDisplay,\r\n        maximumSignificantDigits,\r\n      }).format(value as any);\r\n    },\r\n  };\r\n\r\n  return globalTransformers;\r\n}\r\n\r\nexport function defaultTransformers() {\r\n  const globalTransformers: Record<string, (value: string, options?: Record<string, any>) => string> = {\r\n    json(value) {\r\n      return JSON.stringify(value);\r\n    },\r\n    select(value, options = {}) {\r\n      return options[value] || options.other;\r\n    },\r\n  };\r\n\r\n  return globalTransformers;\r\n}\r\n", "const tokenStart = '{';\r\nconst tokenEnd = '}';\r\nconst tokenPipe = '|';\r\nconst tokenPipeArguments = ',';\r\nconst tokenPipeArgumentsValue = ':';\r\nconst tokenEscape = '\\\\';\r\n\r\n// \"Hello {name} from the {planet | capitalize} {distance | number, unit:\"lightyears\"}\"\r\n// (a) => \"Hello \" + a.name + \" from the \" + capitalize(a.planet) + \" \" + number(a.distance, {unit:'lightyears'})\r\n\r\nfunction fail(char: string, index: number): never {\r\n  throw new Error('Unexpected char `' + char + '` at ' + index);\r\n}\r\n\r\nfunction mapPipeProps([name, value = true]: [string, any]): string {\r\n  return '' + name + ':' + value;\r\n}\r\n\r\nfunction reducePipe(acc: string, [pipeName, ...pipeProps]: [string, ...[string, string][]]): string {\r\n  return 'b.'\r\n    + pipeName\r\n    + '('\r\n    + acc\r\n    + (pipeProps.length\r\n        ? (acc.trim() ? '' : 'void 0') + ',{' + pipeProps.map(mapPipeProps).join() + '}'\r\n        : '')\r\n    + ')';\r\n}\r\n\r\nexport function parser(text: string): string[] {\r\n  const output: string[] = [];\r\n  let chunk = '';\r\n  let previousToken = '';\r\n\r\n  // This is where message starts.\r\n  // \"Hello {name}!\"\r\n  //         ^\r\n  // It must return end index of the message and parsed data.\r\n  function messageStart(startIndex: number): { index: number, output: string; } {\r\n    let localSelector = '';\r\n    let localPipes: [string, ...[string, string][]][] = [];\r\n    let localPipeIndex = -1;\r\n\r\n    function end(index: number) {\r\n      const selectorTrim = localSelector.trim();\r\n      const selector = selectorTrim\r\n        ? selectorTrim[0] === '['\r\n          ? 'a' + selectorTrim\r\n          : 'a.' + selectorTrim\r\n        : '';\r\n      const output = localPipes.reduce(reducePipe, selector);\r\n\r\n      return {\r\n        index,\r\n        output,\r\n      };\r\n    }\r\n\r\n    for (let i = startIndex; i < text.length; i++) {\r\n      const char = text[i];\r\n      const escaped = previousToken === tokenEscape;\r\n      previousToken = char;\r\n\r\n      if (char === tokenEscape) {\r\n        continue;\r\n      }\r\n\r\n      if (tokenPipe === char) {\r\n        localPipeIndex += 1;\r\n        localPipes[localPipeIndex] = [''];\r\n        continue;\r\n      }\r\n\r\n      // Handle message inside selector\r\n      if (tokenStart === char && localPipeIndex === -1 && !escaped) {\r\n        const messageData = messageStart(i + 1);\r\n        i = messageData.index;\r\n\r\n        if (localSelector[localSelector.length - 1] === '.') {\r\n          localSelector = localSelector.slice(0, -1);\r\n        }\r\n\r\n        localSelector += '[' + messageData.output + ']';\r\n        continue;\r\n      }\r\n\r\n      if (tokenEnd === char) {\r\n        return end(i);\r\n      }\r\n\r\n      if (localPipeIndex > -1) {\r\n        const pipe = localPipes[localPipeIndex];\r\n        const args = pipe[pipe.length - 1];\r\n\r\n        if (tokenPipeArguments === char) {\r\n          pipe.push([''] as any);\r\n          continue;\r\n        }\r\n\r\n        if (Array.isArray(args)) {\r\n          if (tokenPipeArgumentsValue === char) {\r\n            args.push('');\r\n            continue;\r\n          }\r\n\r\n          // Handle message inside arguments\r\n          if (tokenStart === char && !escaped) {\r\n            const messageData = messageStart(i + 1);\r\n            i = messageData.index;\r\n            args[args.length - 1] += messageData.output;\r\n            continue;\r\n          }\r\n\r\n          args[args.length - 1] += char;\r\n          continue;\r\n        }\r\n\r\n        // Message starts is outside allowed zones\r\n        if (tokenStart === char && !escaped) {\r\n          fail(char, i);\r\n        }\r\n\r\n        pipe[pipe.length - 1] += char;\r\n        continue;\r\n      }\r\n\r\n      // Message starts is outside allowed zones\r\n      if (tokenStart === char) {\r\n        fail(char, i);\r\n      }\r\n\r\n      localSelector += char;\r\n    }\r\n\r\n    fail(tokenStart, startIndex);\r\n  }\r\n\r\n  for (let i = 0; i < text.length; i++) {\r\n    const char = text[i];\r\n    const escaped = previousToken === tokenEscape;\r\n    previousToken = char;\r\n\r\n    if (char === tokenEscape) {\r\n      continue;\r\n    }\r\n\r\n    if (tokenStart === char && !escaped) {\r\n      output.push(JSON.stringify(chunk));\r\n      chunk = '';\r\n      const messageData = messageStart(i + 1);\r\n      i = messageData.index;\r\n      output.push(messageData.output);\r\n      continue;\r\n    }\r\n\r\n    chunk += char;\r\n  }\r\n\r\n  return output.concat(JSON.stringify(chunk));\r\n}\r\n", "import { parser } from './parser';\r\n\r\nexport interface MessagePipeTransformer<Input = string, Output = string> {\r\n  (value: Input, options?: Record<string, any>): Output;\r\n}\r\n\r\nexport interface MessagePipeTransformers {\r\n  [key: string]: MessagePipeTransformer;\r\n}\r\n\r\nexport interface MessagePipeOptions {\r\n  disableCache?: boolean;\r\n}\r\n\r\nconst rcache: Record<string, any> = {};\r\nconst scache: Record<string, any> = {};\r\n\r\nexport function MessagePipe(transformers: MessagePipeTransformers = {}, { disableCache = false }: MessagePipeOptions = {}) {\r\n\r\n  function compileRaw<Output = string[]>(message: string): (props?: Record<string, any>) => Output {\r\n    if (!disableCache && rcache[message]) {\r\n      return rcache[message];\r\n    }\r\n\r\n    const parsedMessage = Function('b', 'return (a)=>[' + parser(message).join(',') + ']');\r\n\r\n    return disableCache ? parsedMessage(transformers) : rcache[message] = parsedMessage(transformers);\r\n  }\r\n\r\n  function compile<Output = string>(message: string): (props?: Record<string, any>) => Output {\r\n    if (!disableCache && scache[message]) {\r\n      return scache[message];\r\n    }\r\n\r\n    const parsedMessage = Function('b', 'return (a)=>' + parser(message).join('+'));\r\n\r\n    return disableCache ? parsedMessage(transformers) : scache[message] = parsedMessage(transformers);\r\n  }\r\n\r\n  return {\r\n    compileRaw,\r\n    compile,\r\n  };\r\n}\r\n"],
  "mappings": "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",
  "names": ["intlTransformers", "locale", "value", "type", "options", "style", "currency", "unit", "unitDisplay", "maximumSignificantDigits", "defaultTransformers", "tokenStart", "tokenEnd", "tokenPipe", "tokenPipeArguments", "tokenPipeArgumentsValue", "tokenEscape", "fail", "char", "index", "mapPipeProps", "name", "value", "reducePipe", "acc", "pipeName", "pipeProps", "parser", "text", "output", "chunk", "previousToken", "messageStart", "startIndex", "localSelector", "localPipes", "localPipeIndex", "end", "selectorTrim", "selector", "i", "escaped", "messageData", "pipe", "args", "rcache", "scache", "MessagePipe", "transformers", "disableCache", "compileRaw", "message", "parsedMessage", "parser", "compile"]
}
